//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input Action/General Input Action.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GeneralInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GeneralInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""General Input Action"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""a05cda54-200c-4296-9ae3-2f1bb148335d"",
            ""actions"": [
                {
                    ""name"": ""OpenMenu"",
                    ""type"": ""Button"",
                    ""id"": ""35318982-4f0b-4a14-9200-41e6454fbe26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Encyclopedia"",
                    ""type"": ""Button"",
                    ""id"": ""afebb1a2-e027-4b49-ab4d-5084de3934f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Options"",
                    ""type"": ""Button"",
                    ""id"": ""f6712f78-5f49-4e2b-9c98-4672e98d9ae6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""ec044373-864e-4f65-a58e-4b4f2cc56ca9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Map"",
                    ""type"": ""Button"",
                    ""id"": ""f7edbe07-fbc1-4ec3-82a7-d23d66d34224"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Party"",
                    ""type"": ""Button"",
                    ""id"": ""ebd7ebe7-d8e0-4118-abcc-15dce6c6af85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""d1dd707f-acf5-4e78-83cf-ebb7476a6d93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""774b63a0-213f-4d46-b415-738d19a3f691"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Encyclopedia"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e85762fa-4dcd-4aaf-9569-973688298043"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6050bd9e-381a-414e-8f45-6e9b7fbf13f0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c95d684-2429-4d9e-9218-59ae386b7b55"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df7abf64-38dc-4041-b0b7-ddd1dc6e26ce"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Party"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""326ca717-8bb5-420b-a1a7-9e85a8be152e"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9211bb6a-b55f-4841-a1f0-c5c89d541001"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""b444b3f8-f399-43c8-a00e-8314ba9ba417"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a49eb6e6-e687-4847-be62-a7ce1fe3cedb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""5d8af38b-321f-4db0-b544-e564fce8e38f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""be87c589-56c1-400e-98dc-98d91c49490b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""98d67b5b-8c01-4b88-8a3d-ca9fe626fbff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0a8325a2-50c8-4e0b-908a-c09e9e5fd767"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1102895d-5b75-4ee4-acd8-0a0690f5acb8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""82477651-0780-4737-b614-4ba3ce0f9fec"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""00772cdd-1061-49e1-b9c0-d096cf7725ae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a55a3862-9d6b-49ea-99a0-92b121e90582"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92d60efe-1616-4753-8081-822c714d3299"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Selection"",
            ""id"": ""bd652df3-0042-46b0-95c0-16a7cf1b3333"",
            ""actions"": [
                {
                    ""name"": ""Start Selection"",
                    ""type"": ""Button"",
                    ""id"": ""35bbf281-cae9-48e0-a25e-47fa006e5bf4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Multi Select"",
                    ""type"": ""Button"",
                    ""id"": ""bc4b3b45-1f70-4482-b2f9-0f4261e93609"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""End Selection"",
                    ""type"": ""Button"",
                    ""id"": ""3de8e819-a80c-4ca7-9d84-e978692c628c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Target"",
                    ""type"": ""Button"",
                    ""id"": ""9a9b2bea-ed4e-47d5-b6ee-f4acfc7f2b6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Position"",
                    ""type"": ""Value"",
                    ""id"": ""d2486579-d82d-4898-af0d-02a79f450f52"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Delta"",
                    ""type"": ""Value"",
                    ""id"": ""c94dbfab-8c96-4693-bb88-4be14fcbd254"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7480fa4-0a15-4923-ae0f-05201d60673f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Start Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b399586-2fb6-4d6d-b902-d99f6896164e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Multi Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55480a05-2874-46b8-bed1-cf2981673728"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Multi Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b64e59d2-867a-41b2-8743-89601976d16b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46e57400-c4d3-4371-a6b8-41e9a586dacf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""End Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7868d112-37d1-4e9e-91b4-eaa0cb817304"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Mouse Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8967ab78-c00a-4157-b3f5-9177a3650291"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Mouse Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Quick Save and Load"",
            ""id"": ""67629842-0260-4b39-857d-5c81de141bfb"",
            ""actions"": [
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""e1e1e0fc-6f73-4db4-a258-3f13df23b89e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""b819b8c0-7813-4b86-a583-8237af5cb6b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1dd8bf0-b4a0-4907-bd5c-643ed420aafe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5e28f37-f05b-4040-9560-4d363657f0c9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_OpenMenu = m_Menu.FindAction("OpenMenu", throwIfNotFound: true);
        m_Menu_Encyclopedia = m_Menu.FindAction("Encyclopedia", throwIfNotFound: true);
        m_Menu_Options = m_Menu.FindAction("Options", throwIfNotFound: true);
        m_Menu_Save = m_Menu.FindAction("Save", throwIfNotFound: true);
        m_Menu_Map = m_Menu.FindAction("Map", throwIfNotFound: true);
        m_Menu_Party = m_Menu.FindAction("Party", throwIfNotFound: true);
        m_Menu_Inventory = m_Menu.FindAction("Inventory", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Movement = m_Camera.FindAction("Movement", throwIfNotFound: true);
        m_Camera_Rotate = m_Camera.FindAction("Rotate", throwIfNotFound: true);
        m_Camera_ZoomCamera = m_Camera.FindAction("ZoomCamera", throwIfNotFound: true);
        // Selection
        m_Selection = asset.FindActionMap("Selection", throwIfNotFound: true);
        m_Selection_StartSelection = m_Selection.FindAction("Start Selection", throwIfNotFound: true);
        m_Selection_MultiSelect = m_Selection.FindAction("Multi Select", throwIfNotFound: true);
        m_Selection_EndSelection = m_Selection.FindAction("End Selection", throwIfNotFound: true);
        m_Selection_Target = m_Selection.FindAction("Target", throwIfNotFound: true);
        m_Selection_MousePosition = m_Selection.FindAction("Mouse Position", throwIfNotFound: true);
        m_Selection_MouseDelta = m_Selection.FindAction("Mouse Delta", throwIfNotFound: true);
        // Quick Save and Load
        m_QuickSaveandLoad = asset.FindActionMap("Quick Save and Load", throwIfNotFound: true);
        m_QuickSaveandLoad_Save = m_QuickSaveandLoad.FindAction("Save", throwIfNotFound: true);
        m_QuickSaveandLoad_Load = m_QuickSaveandLoad.FindAction("Load", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_OpenMenu;
    private readonly InputAction m_Menu_Encyclopedia;
    private readonly InputAction m_Menu_Options;
    private readonly InputAction m_Menu_Save;
    private readonly InputAction m_Menu_Map;
    private readonly InputAction m_Menu_Party;
    private readonly InputAction m_Menu_Inventory;
    public struct MenuActions
    {
        private @GeneralInputAction m_Wrapper;
        public MenuActions(@GeneralInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenMenu => m_Wrapper.m_Menu_OpenMenu;
        public InputAction @Encyclopedia => m_Wrapper.m_Menu_Encyclopedia;
        public InputAction @Options => m_Wrapper.m_Menu_Options;
        public InputAction @Save => m_Wrapper.m_Menu_Save;
        public InputAction @Map => m_Wrapper.m_Menu_Map;
        public InputAction @Party => m_Wrapper.m_Menu_Party;
        public InputAction @Inventory => m_Wrapper.m_Menu_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @OpenMenu.started += instance.OnOpenMenu;
            @OpenMenu.performed += instance.OnOpenMenu;
            @OpenMenu.canceled += instance.OnOpenMenu;
            @Encyclopedia.started += instance.OnEncyclopedia;
            @Encyclopedia.performed += instance.OnEncyclopedia;
            @Encyclopedia.canceled += instance.OnEncyclopedia;
            @Options.started += instance.OnOptions;
            @Options.performed += instance.OnOptions;
            @Options.canceled += instance.OnOptions;
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
            @Map.started += instance.OnMap;
            @Map.performed += instance.OnMap;
            @Map.canceled += instance.OnMap;
            @Party.started += instance.OnParty;
            @Party.performed += instance.OnParty;
            @Party.canceled += instance.OnParty;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @OpenMenu.started -= instance.OnOpenMenu;
            @OpenMenu.performed -= instance.OnOpenMenu;
            @OpenMenu.canceled -= instance.OnOpenMenu;
            @Encyclopedia.started -= instance.OnEncyclopedia;
            @Encyclopedia.performed -= instance.OnEncyclopedia;
            @Encyclopedia.canceled -= instance.OnEncyclopedia;
            @Options.started -= instance.OnOptions;
            @Options.performed -= instance.OnOptions;
            @Options.canceled -= instance.OnOptions;
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
            @Map.started -= instance.OnMap;
            @Map.performed -= instance.OnMap;
            @Map.canceled -= instance.OnMap;
            @Party.started -= instance.OnParty;
            @Party.performed -= instance.OnParty;
            @Party.canceled -= instance.OnParty;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Movement;
    private readonly InputAction m_Camera_Rotate;
    private readonly InputAction m_Camera_ZoomCamera;
    public struct CameraActions
    {
        private @GeneralInputAction m_Wrapper;
        public CameraActions(@GeneralInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Camera_Movement;
        public InputAction @Rotate => m_Wrapper.m_Camera_Rotate;
        public InputAction @ZoomCamera => m_Wrapper.m_Camera_ZoomCamera;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @ZoomCamera.started += instance.OnZoomCamera;
            @ZoomCamera.performed += instance.OnZoomCamera;
            @ZoomCamera.canceled += instance.OnZoomCamera;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @ZoomCamera.started -= instance.OnZoomCamera;
            @ZoomCamera.performed -= instance.OnZoomCamera;
            @ZoomCamera.canceled -= instance.OnZoomCamera;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Selection
    private readonly InputActionMap m_Selection;
    private List<ISelectionActions> m_SelectionActionsCallbackInterfaces = new List<ISelectionActions>();
    private readonly InputAction m_Selection_StartSelection;
    private readonly InputAction m_Selection_MultiSelect;
    private readonly InputAction m_Selection_EndSelection;
    private readonly InputAction m_Selection_Target;
    private readonly InputAction m_Selection_MousePosition;
    private readonly InputAction m_Selection_MouseDelta;
    public struct SelectionActions
    {
        private @GeneralInputAction m_Wrapper;
        public SelectionActions(@GeneralInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartSelection => m_Wrapper.m_Selection_StartSelection;
        public InputAction @MultiSelect => m_Wrapper.m_Selection_MultiSelect;
        public InputAction @EndSelection => m_Wrapper.m_Selection_EndSelection;
        public InputAction @Target => m_Wrapper.m_Selection_Target;
        public InputAction @MousePosition => m_Wrapper.m_Selection_MousePosition;
        public InputAction @MouseDelta => m_Wrapper.m_Selection_MouseDelta;
        public InputActionMap Get() { return m_Wrapper.m_Selection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionActions set) { return set.Get(); }
        public void AddCallbacks(ISelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectionActionsCallbackInterfaces.Add(instance);
            @StartSelection.started += instance.OnStartSelection;
            @StartSelection.performed += instance.OnStartSelection;
            @StartSelection.canceled += instance.OnStartSelection;
            @MultiSelect.started += instance.OnMultiSelect;
            @MultiSelect.performed += instance.OnMultiSelect;
            @MultiSelect.canceled += instance.OnMultiSelect;
            @EndSelection.started += instance.OnEndSelection;
            @EndSelection.performed += instance.OnEndSelection;
            @EndSelection.canceled += instance.OnEndSelection;
            @Target.started += instance.OnTarget;
            @Target.performed += instance.OnTarget;
            @Target.canceled += instance.OnTarget;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
        }

        private void UnregisterCallbacks(ISelectionActions instance)
        {
            @StartSelection.started -= instance.OnStartSelection;
            @StartSelection.performed -= instance.OnStartSelection;
            @StartSelection.canceled -= instance.OnStartSelection;
            @MultiSelect.started -= instance.OnMultiSelect;
            @MultiSelect.performed -= instance.OnMultiSelect;
            @MultiSelect.canceled -= instance.OnMultiSelect;
            @EndSelection.started -= instance.OnEndSelection;
            @EndSelection.performed -= instance.OnEndSelection;
            @EndSelection.canceled -= instance.OnEndSelection;
            @Target.started -= instance.OnTarget;
            @Target.performed -= instance.OnTarget;
            @Target.canceled -= instance.OnTarget;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
        }

        public void RemoveCallbacks(ISelectionActions instance)
        {
            if (m_Wrapper.m_SelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectionActions @Selection => new SelectionActions(this);

    // Quick Save and Load
    private readonly InputActionMap m_QuickSaveandLoad;
    private List<IQuickSaveandLoadActions> m_QuickSaveandLoadActionsCallbackInterfaces = new List<IQuickSaveandLoadActions>();
    private readonly InputAction m_QuickSaveandLoad_Save;
    private readonly InputAction m_QuickSaveandLoad_Load;
    public struct QuickSaveandLoadActions
    {
        private @GeneralInputAction m_Wrapper;
        public QuickSaveandLoadActions(@GeneralInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Save => m_Wrapper.m_QuickSaveandLoad_Save;
        public InputAction @Load => m_Wrapper.m_QuickSaveandLoad_Load;
        public InputActionMap Get() { return m_Wrapper.m_QuickSaveandLoad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuickSaveandLoadActions set) { return set.Get(); }
        public void AddCallbacks(IQuickSaveandLoadActions instance)
        {
            if (instance == null || m_Wrapper.m_QuickSaveandLoadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QuickSaveandLoadActionsCallbackInterfaces.Add(instance);
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
        }

        private void UnregisterCallbacks(IQuickSaveandLoadActions instance)
        {
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
        }

        public void RemoveCallbacks(IQuickSaveandLoadActions instance)
        {
            if (m_Wrapper.m_QuickSaveandLoadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuickSaveandLoadActions instance)
        {
            foreach (var item in m_Wrapper.m_QuickSaveandLoadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QuickSaveandLoadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QuickSaveandLoadActions @QuickSaveandLoad => new QuickSaveandLoadActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IMenuActions
    {
        void OnOpenMenu(InputAction.CallbackContext context);
        void OnEncyclopedia(InputAction.CallbackContext context);
        void OnOptions(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
        void OnMap(InputAction.CallbackContext context);
        void OnParty(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
    }
    public interface ISelectionActions
    {
        void OnStartSelection(InputAction.CallbackContext context);
        void OnMultiSelect(InputAction.CallbackContext context);
        void OnEndSelection(InputAction.CallbackContext context);
        void OnTarget(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
    }
    public interface IQuickSaveandLoadActions
    {
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
}
